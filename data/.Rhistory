# e
pred <- predict(model, newdata=data.frame(psi=4000), se.fit=TRUE)
pred
exp(0.85)
?predicct
?predict
# e
pred <- predict(model, newdata=data.frame(psi=4000), se.fit=TRUE, type='response')
pred
# e
pred <- predict(model, newdata=data.frame(psi=4000), se.fit=TRUE, type='link')
pred
# e
pred <- predict(model, newdata=data.frame(psi=4000), se.fit=TRUE, type='terms')
pred
# e
pred <- predict(model, newdata=data.frame(psi=4000), se.fit=TRUE, type='response')
c(pred$fit + 1.96*pred$se.fit, pred$fit - 1.96*pred$se.fit)
pred
c(pred$fit + 1.64*pred$se.fit, pred$fit - 1.64*pred$se.fit)
logit <- function(p){log(p / (1-p))}
expit <- function(x){1 / (1 + exp(-x))}
# for the frequentist version, we want the confidence interval to be defined
# as a linear function of the parameters, so in logit space
pred <- predict(model, newdata=data.frame(psi=4000), se.fit=TRUE)
c(pred$fit + 1.64*pred$se.fit, pred$fit - 1.64*pred$se.fit)
expit(pred)
pred
pred$fit
expit(pred$fit)
logit(pred$fit)
expit(pred$fit)
cbind(expit(pred), expit(pr_int)
)
pr_int
pr_int <- c(pred$fit + 1.64*pred$se.fit, pred$fit - 1.64*pred$se.fit)
pr_int
cbind(expit(pred$fit), expit(pr_int))
cbind(expit(pred$fit), t(expit(pr_int)))
pr_int
# for the frequentist version, we want the confidence interval to be defined
# as a linear function of the parameters, so in logit space
pred <- predict(model, newdata=data.frame(psi=4000), se.fit=TRUE)
pr_int <- c(pred$fit - 1.64*pred$se.fit, pred$fit + 1.64*pred$se.fit)
cbind(expit(pred$fit), t(expit(pr_int)))
install.packages('flexmix')
data(betablocker)
data('betablocker')
data("betablocker", package = "flexmix")
library(lasso2)
data(Prostate)
Prostate
dim(Prostate)
map_data
library(ggplot2)
map_data
map_data('state')
library(maps)
maps::state()
maps::state
citation("maps")
maps
version('maps')
info('maps')
packageDescription("maps")
library(mapdata)
packageDescription("ggplot2")
citation("ggplot2")
citation("maps")
library(glmnet)
lambda <- seq(1,10000,10)
lambda
exp(log(10)*seq(log10(1),log10(100),by=0.25)
)
exp(log(10)*seq(log10(1),log10(1000),by=0.25))
exp(log(10)*seq(log10(1),log10(1000),by=0.1))
head(Prostate)
# log space sequence of lambdas to test
lambdas <- exp(log(10)*seq(log10(1),log10(1000),by=0.1))
rmod <- cv.glmnet(lpsa ~ ., alpha = 0, lambda = lambdas)
rmod <- cv.glmnet(lpsa ~ ., alpha = 0, data=Prostate)
library(tidyverse)
x <- Prostate %>% select(-lpsa)
x
y <- Prostate$lpsa
x <- Prostate %>% select(-lpsa) %>% data.matrix()
y <- Prostate$lpsa
rmod <- cv.glmnet(x, y, alpha=0, lambda=lambdas)
rmod
rmod <- cv.glmnet(x, y, alpha=0)
rmod
# log space sequence of lambdas to test
lambdas <- exp(log(10)*seq(log10(1),log10(1000),by=0.01))
rmod <- cv.glmnet(x, y, alpha=0, lambda=lambdas)
rmod
# log space sequence of lambdas to test
lambdas <- exp(log(10)*seq(log10(1),log10(1000),by=0.05))
rmod <- cv.glmnet(x, y, alpha=0, lambda=lambdas)
rmod
rmod <- cv.glmnet(x, y, alpha=0)
rmod
#
rmod <- cv.glmnet(x, y, alpha=0, nfolds=2)
#
rmod <- cv.glmnet(x, y, alpha=0, nfolds=3)
#
rmod <- cv.glmnet(x, y, alpha=0, nfolds=10)
rmod
print(rmod$lambda.min)
print(rmod$lambda.1se)
glmnet
glmnet(x, y, alpha=0, lambda=rmod$lambda.min)
mod1 <- glmnet(x, y, alpha=0, lambda=rmod$lambda.min)
summary(mod1)
plot(rmod)
summary(rmod$glmnet.fit)
names(rmod)
tmp <- rmod$glmnet.fit
names(tmp)
tmp$beta
mod1 <- glmnet(x, y, alpha=0, lambda=rmod$lambda.min)
names(mod1)
mod1$beta
mod2 <- glmnet(x, y, alpha=0, lambda=rmod$lambda.1se)
mod1$beta
mod2$beta
ls_mod <- lm(x, y)
ls_mod <- lm(y~x)
ls_mod
coef(ls_mod)
cbind(ls_mod)
rbind(coef(ls_mod))
cbind(coef(ls_mod))
mod2$beta
colMeans(Prostate)
x2 = x - colMeans(x)
x2
apply(x, 2, sd)
x2 <- (x - colMeans(x)) / apply(x, 2, sd)
x2
#
rmod2 <- cv.glmnet(x2, y, alpha=0, nfolds=10)
rmod2
print(rmod$lambda.min)
mod1 <- glmnet(x, y, alpha=0, lambda=rmod2$lambda.min)
mod1$beta
mod2$beta
mod2 <- glmnet(x2, y, alpha=0, lambda=rmod2$lambda.1se)
mod2$beta
# repeat with standardized covariates
xn <- (x - colMeans(x)) / apply(x, 2, sd)
rmod <- cv.glmnet(xn, y, alpha=0, nfolds=10)
plot(rmod)
print(rmod$lambda.min)
summary(rmod$glmnet.fit)
mod1 <- glmnet(x, y, alpha=0, lambda=rmod$lambda.min)
mod1 <- glmnet(xn, y, alpha=0, lambda=rmod$lambda.min)
mod1$beta
ls_mod <- lm(y~xn)
cbind(coef(ls_mod))
colMeans(xn)
colMeans(x - colMeans(x))
colMeans(x)
head(x)
x <- Prostate %>% select(-lpsa) %>% data.matrix()
y <- Prostate$lpsa
head(x)
colMeans(x)
head(x - colMeans(x))
colMeans(x - colMeans(x))
mean(x$age)
mean(x[,3])
complete.cases(x)
scale(x)
colMeans(scale(x)
)
head(scale(x))
head(x - colMeans(x))
# repeat with standardized covariates
xn <- scale(x)
rmod <- cv.glmnet(xn, y, alpha=0, nfolds=10)
plot(rmod)
print(rmod$lambda.min)
mod1 <- glmnet(xn, y, alpha=0, lambda=rmod$lambda.min)
mod1$beta
ls_mod <- lm(y~xn)
cbind(coef(ls_mod))
colMeans(xn)
ls_mod <- lm(y~xn + 0)
cbind(coef(ls_mod))
data("betablocker", package = "flexmix")
betablocker
head(betablocker)
unique(betablocker$Center)
betaGlm <- glm(cbind(Deaths, Total - Deaths) ~ Treatment,
+    family = "binomial", data = betablocker)
betaGlm <- glm(cbind(Deaths, Total - Deaths) ~ Treatment,
family = "binomial", data = betablocker)
betaGlm
load('p1res.rda')
mean.results
library(kableExtra)
kable(mean.results)
rm(mean.results)
library(ggplot2)
psi <- c(2500,2700,2900,3100,3300,3500,3700,3900,4100,4300)
n <- c(50,70,100,60,40,85,90,50,80,65)
fasten <- data.frame(psi, n, y)
psi <- c(2500,2700,2900,3100,3300,3500,3700,3900,4100,4300)
n <- c(50,70,100,60,40,85,90,50,80,65)
y <- c(10,17,30,21,18,43,54,33,60,51)
fasten <- data.frame(psi, n, y)
fasten$p <- fasten$y / fasten$n
model <- glm(cbind(y, n - y) ~ psi, family='binomial', data=fasten)
resids <- resid(model, type='pear')
qqnorm(resids, main='residual Q-Q plot')
summary(model)
plot(resids)
resids
fasten
qplot(fasten$psi, resids)
qplot(fasten$psi, resids)
qplot(fasten$psi, resids) + geom_intercept(y=0)
qplot(fasten$psi, resids) + geom_hline(0)
qplot(fasten$psi, resids) + geom_hline(yintercept=0)
qplot(fasten$psi, resids) + geom_hline(yintercept=0, color='r')
qplot(fasten$psi, resids) + geom_hline(yintercept=0, color='red')
#
qqnorm(resids, main='residual Q-Q plot')
qqnorm(resids, main='residual Q-Q plot')
qplot(fasten$psi, resids) + geom_hline(yintercept=0, color='red')
qqnorm(resids, main='residual Q-Q plot')
log(10)/1800
log(10)/1800 + log(2)/1800
(log(10)/1800 + log(2)/1800)/2
(log(10)/1800 - 0.0008321479)/1.64
Sys.setenv(USE_CXX14 = 1)
library(rstan)
library(rstanarm)
library(rstanarm)
rstan_options(auto_write=TRUE)
options(mc.cores = parallel::detectCores())
library(bayesplot)
modelb <- stan_glm(cbind(y, n-y) ~ psi, family="binomial", data=fasten,
prior=normal(0.0008321, 0.0002726, autoscale=F),
chains=3, iter=4*10^3, warmup=10^3,
thin=4, seed=818)
summary(modelb, digits=4)
model
posterior <- as.matrix(modelb)
plot_title <- ggtitle("Posterior distributions: medians, 90% intervals",
"Note: psi scaled by 1000")
posterior[,2] <- posterior[,2] * 1000
mcmc_areas(posterior,prob = 0.9) + plot_title
library(tidyverse)
library(boot)
# in order to bootstrap we need to expand out
# the grouped dataframe
fasten_rows <- fasten %>%
uncount(n) %>% group_by(psi) %>%
mutate(y=as.integer(row_number() <= y[1]))
# boot function
logistic_boot <- function(d, indices) {
d <- d[indices,]
fit <- glm(y~psi, data=d, family="binomial")
exp(800 * coef(fit)[2])
}
# run bootstrap and get interval
bootstrap <- boot(data=fasten_rows, statistic=logistic_boot, R=1000)
boot_int <- boot.ci(bootstrap, conf=0.9, type='basic')
ci1 <- cbind(bootstrap[1], t(boot_int$basic[4:5]))
# MLE
ci2 <- exp(800 * cbind(coef(model), confint(model, level=0.9))[2,])
# bayesian interval
ci3 <- exp(800 * cbind(coef(modelb), posterior_interval(modelb, prob=0.9))[2,])
outm <- rbind(ci1, ci2, ci3)
rownames(outm) <- c('boot','mle','bayes')
colnames(outm) <- c('estimate','5%','95%')
print(outm)
pred <- predict(model, newdata=data.frame(psi=4000), se.fit=TRUE)
pr_int <- c(pred$fit - 1.64*pred$se.fit, pred$fit + 1.64*pred$se.fit)
cbind(expit(pred$fit), t(expit(pr_int)))
logit <- function(p){log(p / (1-p))}
expit <- function(x){1 / (1 + exp(-x))}
pred <- predict(model, newdata=data.frame(psi=4000), se.fit=TRUE)
pr_int <- c(pred$fit - 1.64*pred$se.fit, pred$fit + 1.64*pred$se.fit)
cbind(expit(pred$fit), t(expit(pr_int)))
print(cbind(expit(pred$fit), t(expit(pr_int))))
predictive_interval(modelb, prob=0.9, data.frame(psi=4000, n=10000, y=0)) / 10000
posterior_predict(modelb, data.frame(psi=4000, n=10, y=0))
posterior_predict(modelb, data.frame(psi=4000, n=100, y=0))
mean(posterior_predict(modelb, data.frame(psi=4000, n=100, y=0)))
mean(posterior_predict(modelb, data.frame(psi=4000, n=10000, y=0)))
mean(posterior_predict(modelb, data.frame(psi=4000, n=10000, y=0)))
mean(posterior_predict(modelb, data.frame(psi=4000, n=10000, y=0)))/10000
rm(list=ls())
library(lasso2)
library(glmnet)
library(tidyverse)
data(Prostate)
x <- Prostate %>% select(-lpsa) %>% data.matrix()
y <- Prostate$lpsa
#
rmod <- cv.glmnet(x, y, alpha=0, nfolds=10)
plot(rmod)
print(rmod$lambda.min)
print('lambda of minimum error:' )
print(rmod$lambda.min)
print('lambda 1se above lambda of minimum error:')
print(rmod$lambda.1se)
summary(rmod$glmnet.fit)
mod1 <- glmnet(x, y, alpha=0, lambda=rmod$lambda.min)
print(mod1$beta)
mod2 <- glmnet(x, y, alpha=0, lambda=rmod$lambda.1se)
print(mod2$beta)
ls_mod <- lm(y~x)
print(cbind(coef(ls_mod)))
# repeat with standardized covariates
xn <- scale(x)
rmod <- cv.glmnet(xn, y, alpha=0, nfolds=10)
plot(rmod)
print(rmod$lambda.min)
mod1 <- glmnet(xn, y, alpha=0, lambda=rmod$lambda.min)
print(mod1$beta)
ls_mod <- lm(y~xn + 0)
print(cbind(coef(ls_mod)))
rmod <- cv.glmnet(x, y, alpha=0, nfolds=10)
mod1 <- glmnet(x, y, alpha=0, lambda=rmod$lambda.min)
ls_mod <- lm(y~x)
predict(mod1)
x
predict(mod1, x)
mse <- function(p, t){
mean((p - t) ^ 2)
}
mse(predict(mod1, x), y)
mse(predict(lm_mod, x), y)
mse(predict(ls_mod, x), y)
mse(predict(ls_mod, data.frame(x)), y)
library(lme4)
data("betablocker", package = "flexmix")
betaGlm <- glm(cbind(Deaths, Total - Deaths) ~ Treatment,
family = "binomial", data = betablocker)
betaGlm
?glmer
varmod <- glmer(cbind(Deaths, Total-Deaths) ~ 1 | Center,
family='binomial', data=betablocker)
varmod
head(betablocker)
ggplot(betablocker, aes(x=Center, y=Deaths/Total, group=Treatment))
ggplot(betablocker, aes(x=Center, y=Deaths/Total, group=Treatment)) +
geom_point()
ggplot(betablocker, aes(x=Center, y=Deaths/Total, group=Treatment)) +
geom_point(c=Treatment)
ggplot(betablocker, aes(x=Center, y=Deaths/Total, group=Treatment)) +
geom_point(c=Treatment, data=betablocker)
dim(betablocker)
ggplot(betablocker, aes(x=Center, y=Deaths/Total, group=Treatment)) +
geom_point(group=betablocker)
ggplot(betablocker, aes(x=Center, y=Deaths/Total, group=Treatment)) +
geom_point(group=Treatment)
ggplot(betablocker, aes(x=Center, y=Deaths/Total, group=Treatment)) +
geom_point()
ggplot(betablocker, aes(x=Center, y=Deaths/Total, group=as.factor(Treatment))) +
geom_point()
ggplot(betablocker, aes(x=Center, y=Deaths/Total, group=as.factor(Treatment))) +
geom_count()
head(betablocker)
ggplot(betablocker, aes(x=Center, y=Deaths/Total)) +
geom_point(aes=(colour=factor(Treatment)))
ggplot(betablocker, aes(x=Center, y=Deaths/Total)) +
geom_point(aes=(colour=factor(betablocker$Treatment)))
ggplot(betablocker, aes(x=Center, y=Deaths/Total)) +
geom_point(aes=(colour=factor(betablocker$Treatment)))
ggplot(betablocker, aes(x=Center, y=Deaths/Total)) +
geom_point(aes(colour=factor(betablocker$Treatment)))
# fit combined (fixed treatment effect and random center mixtures)
betaMixFix <- stepFlexmix(cbind(Deaths, Total - Deaths) ~ 1 | Center,
model = FLXMRglmfix(family = "binomial", fixed = ~ Treatment),
k = 2:4, nrep = 5, data = betablocker)
# 4
library(flexmix)
library(lme4)
# fit combined (fixed treatment effect and random center mixtures)
betaMixFix <- stepFlexmix(cbind(Deaths, Total - Deaths) ~ 1 | Center,
model = FLXMRglmfix(family = "binomial", fixed = ~ Treatment),
k = 4, nrep = 5, data = betablocker)
betaMixFix
summary(betaMixFix)
varmod
betaGlm
betaGlm$aic
summary(varmod)
varmod$aic
names(varmod)
summary(varmod)$aic
names(summary(varmod))
summary(varmod)$AICtab
betaGlm$bic
betaMixFix2 <- stepFlexmix(cbind(Deaths, Total - Deaths) ~ 1 | Center,
model = FLXMRglmfix(family = "binomial", fixed = ~ Treatment),
k = 2, nrep = 5, data = betablocker)
summary(betaMixFix)
summary(betaMixFix)$AIC
summary(betaMixFix)$AICtab
names(summary(betaMixFix))
names(betaMixFix)
summary(betaMixFix2)
ggplot(betablocker, aes(x=Center, y=Deaths/Total)) +
geom_count(aes(colour=factor(betablocker$Treatment)))
betablocker
ggplot(betablocker, aes(x=Center, y=Deaths/Total)) +
geom_point(aes(size=betablocker$Total, colour=factor(betablocker$Treatment)))
betaGlm
expit(-0.25)
expit <- function(x){1 / (1 + exp(-x))}
expit(-0.25)
exp(-0.2574)
betaGlm$coefficients[2]
exp(betaGlm$coefficients[2])
summary(varmod)
summary(varmod)$AICtab
summary(betaMixFix)
summary(betaMixFix2)
summary(betaMixFix2)
summary(refit(betaMixFix2))
summary(refit(betaMixFix2))
refit
betaMixFix2 <- stepFlexmix(cbind(Deaths, Total - Deaths) ~ 1 | Center,
model = FLXMRglmfix(family = "binomial", fixed = ~ Treatment),
k = 2, nrep = 5, data = betablocker)
summary(betaMixFix2)
# coefficients
summary(refit(betaMixFix2))
library(tidyverse)
library(ggplot2)
library(glmnet)
library(randomForest)
library(betareg)
library(flexmix)
# supporting functions
logit <- function(p){
log(p / (1 - p))
}
expit <- function(x){
exp(x) / (1 + exp(x))
}
zero_one_scale <- function(x, n, prior = 0.5){
(x * (n - 1) + prior) / n
}
mse <- function(pred, truth){
mean((pred - truth)^2)
}
mae <- function(pred, truth){
mean(abs(pred - truth))
}
# set data directory
setwd('C:/Users/fredl/Documents/repos/hnscc-image-analysis/data')
# load datasets
train_dat <- read.csv('train_dat.csv')
dev_dat <- read.csv('dev_dat.csv')
train_dat <- train_dat %>% select(-c('slide','n_cells_corrected'))
dev_dat <- dev_dat %>% select(-c('slide','n_cells_corrected'))
mod1 <- lm(y ~ ., data=train_dat)
summary(mod1)
preds <- predict(mod1, newdata=dev_dat)
mse(preds, dev_dat$y)
cor(preds, dev_dat$y)
mod2 <- glm(cbind(y*tumor_150,(1-y)*tumor_150) ~ ., family=binomial, data=train_dat)
summary(mod2)
preds <- predict(mod2, newdata=dev_dat, type='response')
mse(preds, dev_dat$y)
cor(preds, dev_dat$y)
mae(preds, dev_dat$y)
mod3 <- betareg(zero_one_scale(y, n=1000)~., data=train_dat)
summary(mod3)
preds <- predict(mod3, newdata=dev_dat)
mse(preds, dev_dat$y)
cor(preds, dev_dat$y)
mod4 <- randomForest(y~., data=train_dat, ntree=300, mtry=8)
mae(preds, dev_dat$y)
preds <- predict(mod4, newdata=dev_dat)
mse(preds, dev_dat$y)
cor(preds, dev_dat$y)
mae(preds, dev_dat$y)
mod5 <- flexmix(cbind(y*tumor_150,(1-y)*tumor_150)~., data=train_dat, k=2,
model=FLXMRglm(family='binomial'))
preds <- data.frame(predict(mod5, newdata=dev_dat))
cluster_true <- clusters(mod5, dev_dat)
final_pred <- vector()
for (i in 1:nrow(dev_dat)){
final_pred[i] <- preds[i, cluster_true[i]]
}
mse(final_pred, dev_dat$y)
cor(final_pred, dev_dat$y)
mae(final_pred, dev_dat$y)
head(final_pred)
# can we predict those clusters?
training_clusters <- clusters(mod5, train_dat)
X_train <- train_dat %>% select(-'y')
X_dev <- dev_dat %>% select(-'y')
clf <- randomForest(as.factor(training_clusters) ~ ., data=X_train, ntree=300, mtry=6)
clf <- randomForest(as.factor(training_clusters) ~ ., data=X_train, ntree=300)
cluster_preds <- as.numeric(predict(clf, X_dev))
table(cluster_preds, cluster_true)
final_pred <- vector()
for (i in 1:nrow(dev_dat)){
final_pred[i] <- preds[i, cluster_preds[i]]
}
mse(final_pred, dev_dat$y)
cor(final_pred, dev_dat$y)
mae(final_pred, dev_dat$y)
